{"version":3,"sources":["redux/user/user.selectors.js","redux/user/user.types.js","components/order-search/order-search.component.jsx","redux/user/user.actions.js","redux/take/app.types.js","redux/take/app.actions.js","redux/take/app.selectors.js","components/take-examples/take-examples.component.jsx","home/home.component.jsx","App.js","redux/take/app.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/take/app.sagas.js","redux/data/user.data.js","redux/user/user.sagas.js","redux/root-saga.js","redux/store.js","index.js"],"names":["selectUser","state","user","selectOrderHistory","createSelector","orderHistory","selectCurrentUser","currentUser","UserActionTypes","FETCH_ORDERS_START","FETCH_ORDERS_SUCCESS","FETCH_ORDERS_FAILURE","USER_SIGN_OUT","USER_SIGN_IN","connect","dispatch","fetchUserOrdersStart","type","payload","signInUser","email","signOutUser","useState","loginEmail","searchEmail","searchCriteria","setSearchCriteria","handleChange","event","target","value","name","className","href","onChange","onClick","map","order","key","id","date","amount","TakeActionTypes","INCREMENT","INCREMENT_TAKE","INCREMENT_TAKEEVERY","INCREMENT_TAKELATEST","DECREMENT","RESET","INCREMENT_FROM_SAGA","SET_TAKE","SET_TAKEEVERY","SET_TAKELATEST","executeTakeAction","actionTypeText","selectApp","app","selectAppValue","sagaValue","increment","TakeActionType","incrementTake","incrementTakeEvery","incrementTakeLatest","decrement","reset","Home","displayOrderSearch","setDisplayOrderSearch","displayTakeSample","setDisplayTakeSample","App","INITIAL_STATE","takeValue","takeEveryValue","takeLatestValue","appReducer","action","error","userReducer","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","incrementFromSaga","incrementTakeLatestSetup","incrementTakeSetup","incrementTakeEverySetup","takeSagas","console","log","delay","put","takeLatest","take","takeEvery","all","call","USER_ORDERS","fetchUserOrders","onSignInSuccessFetchOrders","onFetchUserOrdersStart","userSagas","orderList","filter","message","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","applyMiddleware","run","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0db3fdf5.chunk.js","sourcesContent":["import {createSelector} from 'reselect';\r\n\r\nconst selectUser = state => state.user;\r\n\r\nexport const selectOrderHistory = createSelector (\r\n    [selectUser],\r\n    user => user.orderHistory\r\n);\r\n\r\nexport const selectCurrentUser = createSelector (\r\n    [selectUser],\r\n    user => user.currentUser\r\n);\r\n","const UserActionTypes = {\r\n\r\n    FETCH_ORDERS_START : \"FETCH_ORDERS_START\",\r\n    FETCH_ORDERS_SUCCESS : \"FETCH_ORDERS_SUCCESS\",\r\n    FETCH_ORDERS_FAILURE : \"FETCH_ORDERS_FAILURE\", \r\n    USER_SIGN_OUT : \"USER_SIGN_OUT\",\r\n    USER_SIGN_IN : \"USER_SIGN_IN\" \r\n}\r\n\r\nexport default UserActionTypes;\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {selectCurrentUser, selectOrderHistory} from '../../redux/user/user.selectors' \r\nimport {fetchUserOrdersStart, signInUser, signOutUser} from '../../redux/user/user.actions'\r\n\r\nconst OrderSearch = ({currentUser, orderHistory, fetchUserOrdersStart, signInUser, signOutUser}) => {\r\n\r\n    const [searchCriteria, setSearchCriteria] = useState({loginEmail: \"\", searchEmail:\"\"});\r\n    const {loginEmail, searchEmail} = searchCriteria;\r\n\r\n    const handleChange = event => {\r\n        const {value, name} = event.target;\r\n        setSearchCriteria({...searchCriteria, [name]: value});\r\n    }\r\n\r\n    const handleSignIn = () => {\r\n        if (loginEmail !== \"\")\r\n            signInUser(loginEmail);\r\n    }\r\n\r\n    const handleFetchOrders = () => {\r\n       if (searchEmail !== \"\")\r\n            fetchUserOrdersStart(searchEmail);\r\n    }\r\n\r\n    const handleSignOut = () => {\r\n        if (currentUser)\r\n            signOutUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"details\">\r\n                <h1><center>A Simple New Action Implementation</center></h1>\r\n                <p></p>\r\n                <p>This is a simple implementation of a redux-saga action - the order search. In this app, when a user signs in, redux-saga will automatically fetch the user's orders. When a user signs out, those orders disappear.</p>\r\n                <p>The same order search feature is made available independently, as in searching for orders by email. You can see the different action calls in the console upon user login and order search.</p>\r\n                <p>This app focuses solely on the redux-saga code and configuration. The database and authentication setup is irrelevant here. For this app, order data is stored in a file, and the SIGN_IN action provides a currentUser object that would be similar to a real application. For this app, the currentUser object is just an email address.</p>\r\n                <p>To see an explanation of this implementation, visit this <a href=\"https://catscoding.blogspot.com/2020/04/create-new-redux-saga-action.html\">blog post</a>.</p>\r\n                <p>Open the Javascript Console to see log output.</p>\r\n            </div>\r\n            <div className=\"component-list-three\">\r\n                <div className=\"component\">\r\n                    <div className=\"title\">Sign In User</div>\r\n                    <div className=\"title\">\r\n                        <form>\r\n                            <select name=\"loginEmail\" onChange={handleChange}>\r\n                                <option value=\"\">...select account...</option>\r\n                                <option value=\"mary@mail.com\">mary@mail.com</option>\r\n                                <option value=\"jane@mail.com\">jane@mail.com</option>\r\n                                <option value=\"chris@mail.com\">chris@mail.com</option>\r\n                            </select>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <button onClick={() => handleSignIn()}>Sign In User</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"component\">\r\n                    <div className=\"title\">Fetch Orders By Email</div>\r\n                    <div className=\"title\">\r\n                        <form>\r\n                            <select name=\"searchEmail\" onChange={handleChange}>\r\n                                <option value=\"\">...select account...</option>\r\n                                <option value=\"mary@mail.com\">mary@mail.com</option>\r\n                                <option value=\"jane@mail.com\">jane@mail.com</option>\r\n                                <option value=\"chris@mail.com\">chris@mail.com</option>\r\n                            </select>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <button onClick={() => handleFetchOrders()}>Fetch Orders </button>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"component\">\r\n                    <div className=\"title\">Sign Out User</div>\r\n                    <div className=\"description\">Will only execute if a user was already signed in.</div>\r\n                    <div className=\"buttons\">\r\n                        <button onClick={() => handleSignOut()}>Sign Out User </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"component-wide\">\r\n                <div className=\"title\">User Signed In:</div>\r\n                <div className=\"description\">{currentUser ? currentUser : \"~ No one is signed in at the moment. ~\"}</div>\r\n                <div className=\"title\">Orders:</div>\r\n                {\r\n                    !orderHistory ? \"No orders found.\" : \r\n                        \r\n                            orderHistory.map(order => \r\n                                    <div className=\"description\" key={order.id} >{order.id} - {order.email} - {order.date} - ${order.amount}</div>\r\n                                )\r\n                        \r\n                    \r\n                }\r\n            </div>\r\n            <br/>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    currentUser: selectCurrentUser(state),\r\n    orderHistory: selectOrderHistory(state)\r\n});\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n    fetchUserOrdersStart: (currentUser) => dispatch (fetchUserOrdersStart(currentUser)),\r\n    signInUser: (email) => dispatch(signInUser(email)), \r\n    signOutUser: () => dispatch(signOutUser())\r\n\r\n});\r\n  \r\nexport default connect(mapStateToProps,mapDispatchToProps)(OrderSearch);","import UserActionTypes from './user.types';\r\n\r\nexport const fetchUserOrdersStart = (currentUser) => ({\r\n    type : UserActionTypes.FETCH_ORDERS_START,\r\n    payload: currentUser\r\n});\r\n\r\nexport const fetchUserOrdersSuccess = (orderHistory) => ({\r\n    type : UserActionTypes.FETCH_ORDERS_SUCCESS,\r\n    payload: orderHistory\r\n});\r\n\r\nexport const fetchUserOrdersFailure = (error) => ({\r\n    type: UserActionTypes.FETCH_ORDERS_FAILURE,\r\n    payload: error\r\n});\r\n\r\nexport const signInUser = (email) => ({\r\n    type: UserActionTypes.USER_SIGN_IN,\r\n    payload: email\r\n})\r\n\r\nexport const signOutUser = () => ({\r\n    type: UserActionTypes.USER_SIGN_OUT\r\n})","const TakeActionTypes = {\r\n\r\n    INCREMENT: \"INCREMENT\",\r\n    INCREMENT_TAKE: \"INCREMENT_TAKE\",\r\n    INCREMENT_TAKEEVERY: \"INCREMENT_TAKEEVERY\",\r\n    INCREMENT_TAKELATEST: \"INCREMENT_TAKELATEST\",\r\n    DECREMENT: \"DECREMENT\",\r\n    RESET: \"RESET\",\r\n\r\n    INCREMENT_FROM_SAGA: 'INCREMENT_FROM_SAGA',\r\n\r\n    SET_TAKE: \"SET_TAKE\",\r\n    SET_TAKEEVERY: \"SET_TAKEEVERY\",\r\n    SET_TAKELATEST: \"SET_TAKELATEST\"\r\n    \r\n}\r\n\r\nexport default TakeActionTypes;","import TakeActionTypes from './app.types';\r\n\r\nexport const executeTakeAction = (actionTypeText, value) => ({\r\n    type : actionTypeText,\r\n    payload: value\r\n});\r\n\r\nexport const setTakeValue = (value) => ({\r\n    type : TakeActionTypes.SET_TAKE,\r\n    payload: value\r\n});\r\n\r\nexport const setTakeEveryValue = (value) => ({\r\n    type : TakeActionTypes.SET_TAKEEVERY,\r\n    payload: value\r\n});\r\n\r\nexport const setTakeLatestValue = (value) => ({\r\n    type : TakeActionTypes.SET_TAKELATEST,\r\n    payload: value\r\n});","import {createSelector} from 'reselect';\r\n\r\nexport const selectApp = state => state.app;\r\n\r\nexport const selectAppValue = createSelector (\r\n    [selectApp],\r\n    app => app.value\r\n);\r\n\r\nexport const selectSagaValue = createSelector (\r\n    [selectApp],\r\n    app => app.sagaValue\r\n);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {executeTakeAction} from '../../redux/take/app.actions';\r\nimport TakeActionType from '../../redux/take/app.types';\r\nimport {selectAppValue} from '../../redux/take/app.selectors';\r\n\r\nconst TakeExample = ({ incrementTake, incrementTakeEvery, incrementTakeLatest, increment, decrement, reset, value }) => {\r\n  \r\n  return( \r\n    <div> \r\n       \r\n      <div className=\"details\">\r\n        <h1><center>Difference between take(), takeEvery(), takeLatest()</center></h1>\r\n        <p></p>\r\n        <p>The take(), takeEvery(), takeLatest() calls have been placed within their own separate generators and can be executed from the buttons below. </p>\r\n        <p>Each Saga generator will call the incrementFromSaga() function. The incrementFromSaga() function delays for 3 seconds and then dispatches the INCREMENT_FROM_SAGA action. The delay is added to demonstrate the control redux-saga has over the order of function calls.</p>\r\n        <p>The INCREMENT_FROM_SAGA action simply increments the value by 1.</p>\r\n        <p>Open the Javascript Console to see log output.</p>\r\n      </div>\r\n      <div className=\"component-wide\">\r\n        <center>\r\n          <div className=\"title\">Value: {value}</div>\r\n          <div className=\"description\">Simple add, minus, reset with no Saga generators called.</div>\r\n          <div className=\"buttons\">\r\n            <button onClick={() => increment(value)}>Add 1 </button>\r\n            <button onClick={() => decrement(value)}>Minus 1</button>\r\n            <button onClick={() => reset(value)}>Reset</button>\r\n          </div>\r\n        </center>\r\n      </div>\r\n      <div className=\"component-list-three\">\r\n          <div className=\"component\">\r\n            <div className=\"title\">Using take()</div>\r\n            <div className=\"description\">It will take only the first action dispatched of a certain type. It returns the payload from that specific action. If the action is dispatched again, it will not be called. It has blocking behavior.</div>\r\n            <div className=\"description\">Click the button 3x quickly and watch the log.</div>\r\n            <div className=\"buttons\">\r\n              <button onClick={() => incrementTake(value)}>Add 1 (take) </button>\r\n            </div>\r\n            <div className=\"description\">You will find \"incrementFromSaga() started.\" only once. Then, 3 seconds after that you will see the dispatch call for INCREMENT_FROM_SAGA. This is called only once. Any more clicks will be ignored.</div>\r\n            \r\n          </div>\r\n          <div className=\"component\">\r\n            <div className=\"title\">Using takeEvery()</div>\r\n            <div className=\"description\">This will execute upon every time the specified action is dispatched. It executes the function specified in the second parameter whenever that action type is dispatched. A payload is also returned.</div>\r\n            <div className=\"description\">Click the button 3x quickly and watch the log.</div>\r\n            <div className=\"buttons\">\r\n              <button onClick={() => incrementTakeEvery(value)}>Add 1 (takeEvery) </button>\r\n            </div>\r\n            <div className=\"description\"> You will see three instance of \"incrementFromSaga() started.\" in the log, one for each call. Each call will be delayed 3 seconds before dispatching INCREMENT_FROM_SAGA. The value will be incremented 3 times.</div>\r\n          </div>\r\n          <div className=\"component\">\r\n            <div className=\"title\">Using takeLatest()</div>\r\n            <div className=\"description\">This will take only the last action dispatched of a certain type. If someone dispatches 10 actions in a row for an async task, this will only execute upon the last one, all previous calls are cancelled.</div>\r\n            <div className=\"description\">Click the button 3x quickly and watch the log. </div>\r\n            <div className=\"buttons\">\r\n              <button onClick={() => incrementTakeLatest(value)}>Add 1 (takeLatest) </button>\r\n            </div>  \r\n            <div className=\"description\">You will see three instance of \"incrementFromSaga() started.\" in the log for each call. Since all subsequent call completed before incrementFromSaga() finished, you will only see one dispatch of INCREMENT_FROM_SAGA in the log. The value will be incremented from the latest value, and only once.</div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  value: selectAppValue(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n \r\n  increment: (value) => dispatch(executeTakeAction(TakeActionType.INCREMENT, value)),\r\n  incrementTake: (value) => dispatch(executeTakeAction(TakeActionType.INCREMENT_TAKE, value)),\r\n  incrementTakeEvery: (value) => dispatch(executeTakeAction(TakeActionType.INCREMENT_TAKEEVERY, value)),\r\n  incrementTakeLatest: (value) => dispatch(executeTakeAction(TakeActionType.INCREMENT_TAKELATEST, value)),\r\n  decrement: (value) => dispatch(executeTakeAction(TakeActionType.DECREMENT, value)),\r\n  reset: (value) => dispatch(executeTakeAction(TakeActionType.RESET, value))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TakeExample);\r\n","import React, {useState} from 'react';\r\n\r\nimport './home.css';\r\n\r\nimport OrderSearch from '../components/order-search/order-search.component';\r\nimport TakeExample from '../components/take-examples/take-examples.component';\r\n\r\nconst Home = () => {\r\n\r\n    const [displayOrderSearch, setDisplayOrderSearch] = useState(false);\r\n    const [displayTakeSample, setDisplayTakeSample] = useState(false);\r\n\r\n    const displayOrderSearchComponent = () => {\r\n        setDisplayOrderSearch(true);\r\n        setDisplayTakeSample(false);\r\n    }\r\n\r\n    const displayTakeSampleComponent = () => {\r\n        setDisplayOrderSearch(false);\r\n        setDisplayTakeSample(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"details\">\r\n            <center>\r\n                <h1>Redux-Saga Snippets</h1>\r\n                <p></p>\r\n                <p>A small collection of redux-saga sample implementations.</p>\r\n                <p>The repistory for this app can be found on <a href=\"https://github.com/tanyamiranda/redux-saga\">Github</a></p>\r\n            </center>\r\n            </div>\r\n            <div className=\"component-list\">\r\n                <div className=\"component-selection\" onClick={displayOrderSearchComponent}>\r\n                    <div className=\"title\" >Order Search</div>\r\n                    <div className=\"details\">A simple implementation of a few redux-saga actions.</div>\r\n                </div>\r\n                <div className=\"component-selection\" onClick={displayTakeSampleComponent}>\r\n                    <div className=\"title\" >Take/TakeEvery/TakeLatest</div>\r\n                    <div className=\"details\">An explanation of these redux-saga functions.</div>\r\n                </div>\r\n            </div>        \r\n            <br/>\r\n            <hr/>\r\n            <div className=\"component-page\">\r\n                {!displayOrderSearch ? null : (\r\n                    <OrderSearch />\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"component-page\">\r\n                {!displayTakeSample ? null : (\r\n                    <TakeExample />\r\n                )}\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nimport Home from './home/home.component';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n     <Home/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import TakeActionTypes from './app.types';\r\n\r\nconst INITIAL_STATE = {\r\n  value: 0,\r\n  takeValue: 0 ,\r\n  takeEveryValue: 0,\r\n  takeLatestValue: 0\r\n};\r\n\r\nconst appReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case TakeActionTypes.SET_TAKE:\r\n      return {\r\n        ...state,\r\n        takeValue: action.payload\r\n      };\r\n    case TakeActionTypes.SET_TAKEEVERY:\r\n      return {\r\n        ...state,\r\n        takeEveryValue: action.payload\r\n      };\r\n    case TakeActionTypes.SET_TAKELATEST: \r\n      return {\r\n        ...state,\r\n        takeLatestValue: action.payload\r\n      };\r\n\r\n    case TakeActionTypes.INCREMENT:\r\n    case TakeActionTypes.INCREMENT_TAKE:\r\n    case TakeActionTypes.INCREMENT_TAKEEVERY:\r\n    case TakeActionTypes.INCREMENT_TAKELATEST: \r\n    case TakeActionTypes.INCREMENT_FROM_SAGA: \r\n      return {\r\n        ...state,\r\n        value: state.value + 1\r\n      };\r\n    case TakeActionTypes.DECREMENT:\r\n      return {\r\n        ...state,\r\n        value: state.value - 1\r\n      };\r\n    case TakeActionTypes.RESET:\r\n      return {\r\n        ...state,\r\n        value: 0\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","import UserActionTypes from './user.types';\r\n\r\nconst INITIAL_STATE = {\r\n    currentUser: null,\r\n    orderHistory: [],   \r\n    error: null    \r\n}\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case UserActionTypes.USER_SIGN_IN:\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload\r\n            }\r\n\r\n        case UserActionTypes.USER_SIGN_OUT:\r\n            return {\r\n                ...state,\r\n                currentUser: null,\r\n                orderHistory: [],\t\t\t\t\t\r\n                error: null\r\n            }        \r\n        case UserActionTypes.FETCH_ORDERS_SUCCESS: \r\n            return {\r\n                ...state,\r\n                orderHistory: action.payload\t\t\r\n            }\r\n        case UserActionTypes.FETCH_ORDERS_FAILURE:\r\n            return {\r\n                ...state,\r\n                orderHistory: [],\t\t\t\t\t\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import {combineReducers} from 'redux';\r\nimport {persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport appReducer from './take/app.reducer';\r\nimport userReducer from './user/user.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,           // The localStorage to use \r\n    whitelist: ['cart']     // reducers to persist in the localStore\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  user: userReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer); \r\n\r\n","import {take, takeEvery, takeLatest, delay, put, call, all} from 'redux-saga/effects';\r\n\r\nimport TakeActionTypes from './app.types';\r\n\r\n//import {selectAppValue} from './app.selectors'\r\n\r\nexport function* incrementFromSaga() {\r\n  console.log(\"incrementFromSaga() started.\");\r\n  yield delay(3000); // 3-second delay to demonstrate SAGA control\r\n  yield put({ type: TakeActionTypes.INCREMENT_FROM_SAGA });\r\n  console.log(\"incrementFromSaga() completed.\")\r\n}\r\n\r\nexport function* incrementTakeLatestSetup() {\r\n  //console.log(\"incrementTakeLatestSetup()...\");\r\n  yield takeLatest(TakeActionTypes.INCREMENT_TAKELATEST, incrementFromSaga);\r\n}\r\n\r\nexport function* incrementTakeSetup() {\r\n  //console.log(\"incrementTakeSetup()...\");\r\n  yield take(TakeActionTypes.INCREMENT_TAKE);\r\n  yield incrementFromSaga();\r\n}\r\n\r\nexport function* incrementTakeEverySetup() {\r\n  //console.log(\"incrementTakeSetup()...\");\r\n  yield takeEvery(TakeActionTypes.INCREMENT_TAKEEVERY, incrementFromSaga);\r\n}\r\n\r\nexport function* takeSagas() {\r\n  yield all([\r\n      call(incrementTakeEverySetup),\t\t\t\r\n      call(incrementTakeSetup),\r\n      call(incrementTakeLatestSetup)\r\n  ]);\r\n}","export const USER_ORDERS =  [\r\n    {   \r\n        email: 'chris@mail.com',\r\n        id: 100000001,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'jane@mail.com',\r\n        id: 100000002,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 100000003,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 100000004,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {   \r\n        email: 'chris@mail.com',\r\n        id: 100000005,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'chris@mail.com',\r\n        id: 100000006,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 100000007,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'jane@mail.com',\r\n        id: 100000008,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {   \r\n        email: 'mary@mail.com',\r\n        id: 200000001,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 200000002,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'jane@mail.com',\r\n        id: 200000003,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'chris@mail.com',\r\n        id: 200000004,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {   \r\n        email: 'mary@mail.com',\r\n        id: 300000001,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'jane@mail.com',\r\n        id: 300000002,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 300000003,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'jane@mail.com',\r\n        id: 300000004,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {   \r\n        email: 'mary@mail.com',\r\n        id: 999999999,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'chris@mail.com',\r\n        id: 999999998,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'mary@mail.com',\r\n        id: 999999997,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        email: 'chris@mail.com',\r\n        id: 999999996,\r\n        amount: 125,\r\n        date: '1/1/2020'\r\n    }\r\n];","import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\nimport {fetchUserOrdersSuccess, fetchUserOrdersFailure} from './user.actions';\r\n\r\nimport {USER_ORDERS} from '../data/user.data'\r\n\r\nexport function* fetchUserOrders({payload: email}) {\r\n    try {\r\n        const orderList = USER_ORDERS.filter(order => order.email === email);\r\n        yield put(fetchUserOrdersSuccess(orderList));\r\n    }\r\n    catch (error) {\r\n        yield put(fetchUserOrdersFailure(error.message)); \t\r\n    }\r\n}\t\r\n\r\nexport function* onSignInSuccessFetchOrders() {\t\t\t\r\n    yield takeLatest(\r\n        UserActionTypes.USER_SIGN_IN, \t\t\t\r\n        fetchUserOrders\r\n    )\r\n}\r\n\r\nexport function* onFetchUserOrdersStart() {\t\t\r\n    yield takeLatest(\r\n        UserActionTypes.FETCH_ORDERS_START, \r\n        fetchUserOrders\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onFetchUserOrdersStart),\t\t\t\r\n        call(onSignInSuccessFetchOrders)\t\t\t\r\n    ]);\r\n}","import {all, call} from 'redux-saga/effects';\r\n\r\nimport {takeSagas} from './take/app.sagas';\r\nimport {userSagas} from './user/user.sagas';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([      \r\n        call(takeSagas),\r\n        call(userSagas)\r\n    ]);\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport {persistStore} from 'redux-persist';\r\n\r\nimport rootReducer from './root-reducer';\r\nimport rootSaga from './root-saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [logger, sagaMiddleware];\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nsagaMiddleware.run(rootSaga); \r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default {store, persistor};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}